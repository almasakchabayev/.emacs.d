#+TITLE: Emacs Configuration

* Initialization
** Add cask as package manager

#+BEGIN_SRC emacs-lisp
  (require 'cask "/usr/local/share/emacs/site-lisp/cask/cask.el")
  (cask-initialize)
#+END_SRC

** Make all commands that work in shell work in emacs's eshell

#+BEGIN_SRC emacs-lisp
  (require 'exec-path-from-shell)
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+END_SRC

** Save emacs Session by default

#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
#+END_SRC

** Make emacs auto refresh all buffers when files have changed on disk

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

* UI preferences
** Disable window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

** Hide the splash screen and banner

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
    inhibit-startup-echo-area-message t)
#+END_SRC

** Enable linum-mode to enable line numbers in the margin of the active buffer

#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)

  (setq linum-format "%4d \u2502 ")
#+END_SRC

** Disable toggle-truncate-lines for cleaner word wrapping

#+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines nil)
  (setq truncate-partial-width-windows nil)

  (setq org-startup-truncated nil)
#+END_SRC

** Setup theme

#+BEGIN_SRC emacs-lisp
  (require 'zenburn-theme)
  (load-theme 'zenburn t)
#+END_SRC

** Set default font and configure font-sizing

#+BEGIN_SRC emacs-lisp
  (setq my/default-font "Inconsolata")
  (setq my/default-font-size 18)
  (setq my/current-font-size my/default-font-size)

  (setq my/font-change-increment 1.1)

  (defun my/set-font-size ()
    "Set the font to `my/default-font' at `my/current-font-size'."
    (set-frame-font
     (concat my/default-font "-" (number-to-string my/current-font-size))))

  (defun my/reset-font-size ()
    "Change font size back to `my/default-font-size'."
    (interactive)
    (setq my/current-font-size my/default-font-size)
    (my/set-font-size))

  (defun my/increase-font-size ()
    "Increase current font size by a factor of `my/font-change-increment'."
    (interactive)
    (setq my/current-font-size
          (ceiling (* my/current-font-size my/font-change-increment)))
    (my/set-font-size))

  (defun my/decrease-font-size ()
    "Decrease current font size by a factor of `my/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq my/current-font-size
          (max 1
               (floor (/ my/current-font-size my/font-change-increment))))
    (my/set-font-size))

  (define-key global-map (kbd "C-)") 'my/reset-font-size)
  (define-key global-map (kbd "C-+") 'my/increase-font-size)
  (define-key global-map (kbd "C-=") 'my/increase-font-size)
  (define-key global-map (kbd "C-_") 'my/decrease-font-size)
  (define-key global-map (kbd "C--") 'my/decrease-font-size)

  (my/reset-font-size)
#+END_SRC

** Highlight the current line when in insert mode

=global-hl-line-mode= softly highlights the background color of the line containing point. It makes it a bit easier to find point, and itâ€™s useful when pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (require 'hl-line)
  (set-face-background 'hl-line "#2B2B2B")

  (defun on-hl-line-mode-hook () (global-hl-line-mode 1))
  (defun off-hl-line-mode-hook () (global-hl-line-mode 0))
  (add-hook 'xah-fly-command-mode-activate-hook 'off-hl-line-mode-hook)
  (add-hook 'xah-fly-insert-mode-activate-hook  'on-hl-line-mode-hook)
#+END_SRC

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when programming.

#+BEGIN_SRC emacs-lisp
  (require 'diff-hl)
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC

* Customizations
** Use spaces instead of tabs
   
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Make default tab-width = 2

I like shallow indentation, but tabs are displayed as 8 characters by default. This reduces that.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

** Make emacs auto indent

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

** Make C-a toggle between the beginning of the line and the beginning of the code

#+BEGIN_SRC emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)
#+END_SRC

** Make C-d duplicate line or region

#+BEGIN_SRC emacs-lisp
  (defun duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times.
  If there's no region, the current line will be duplicated. However, if
  there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (let (beg end (origin (point)))
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (let ((region (buffer-substring-no-properties beg end)))
      (dotimes (i arg)
        (goto-char end)
        (newline)
        (insert region)
        (setq end (point)))
      (goto-char (+ origin (* (length region) arg) arg)))))
  (global-set-key (kbd "C-d") 'duplicate-current-line-or-region)
#+END_SRC
   
** Make M-; comment/uncomment line/region

#+BEGIN_SRC emacs-lisp
  (defun comment-dwim-line (&optional arg)
    "Replacement for the comment-dwim command.
    If no region is selected and current line is not blank and we are not at the end of the line,
    then comment current line.
    Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
    (interactive "*P")
    (comment-normalize-vars)
    (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
        (comment-or-uncomment-region (line-beginning-position) (line-end-position))
      (comment-dwim arg)))

  (global-set-key "\M-;" 'comment-dwim-line)
#+END_SRC

** Mac OS X specific key bindings

#+BEGIN_SRC emacs-lisp
  (setq ns-command-modifier 'hyper)

  (global-set-key [(hyper a)] 'mark-whole-buffer)
  (global-set-key [(hyper v)] 'yank)
  (global-set-key [(hyper c)] 'kill-ring-save)
  (global-set-key [(hyper x)] 'kill-region)
  (global-set-key [(hyper s)] 'save-buffer)
  (global-set-key [(hyper l)] 'goto-line)
  (global-set-key [(hyper o)] 'find-file)
  (global-set-key [(hyper f)] 'isearch-forward)
  (global-set-key [(hyper g)] 'isearch-repeat-forward)
  (global-set-key [(hyper w)]
                  (lambda () (interactive) (kill-buffer (current-buffer))))
  (global-set-key [(hyper .)] 'keyboard-quit)

  ;; I disabled this since I want to avoid hitting Cmd-q accidentally.
  (global-set-key [(hyper q)] 'save-buffers-kill-emacs)

 ;; (require 'redo) (global-set-key [(hyper z)] 'undo) ;; (global-set-key [(hyper shift z)] 'redo)

  ;; To backward-kill-word, in Mac we usually do Option-Backspace
  (global-set-key [(meta delete)]  'backward-kill-word)
#+END_SRC

* Modes
** Enable xah-fly-keys.el

#+BEGIN_SRC emacs-lisp
  (require 'xah-fly-keys)
  (xah-fly-keys-set-layout "qwerty")
  (xah-fly-keys 1)

  (define-key xah-fly-key-map (kbd "x") 'xah-cut-line-or-region)
  (define-key xah-fly-key-map (kbd "c") 'xah-copy-line-or-region)
#+END_SRC

** Enable which-key-mode

#+BEGIN_SRC emacs-lisp
  (require 'which-key)
  (which-key-mode)
#+END_SRC

** Enable subword-mode everywhere

Treating terms in CamelCase symbols as separate words makes editing a little easier.

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Enable ido-mode

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** Enable smex

#+BEGIN_SRC emacs-lisp
  (require 'smex)
  (smex-initialize)

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

** Enable smartparens and add shortcuts

#+BEGIN_SRC emacs-lisp
  (smartparens-global-mode t)
  (require 'smartparens-config)

  (global-set-key (kbd "C-M-a") 'sp-beginning-of-sexp)
  (global-set-key (kbd "C-M-e") 'sp-end-of-sexp)
#+END_SRC

** Add neotree plugin

#+BEGIN_SRC emacs-lisp
  (require 'neotree)
  (global-set-key [f8] 'neotree-toggle)

  ; (setq neo-smart-open t)
  ; (setq projectile-switch-project-action 'neotree-projectile-action)
  ; (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+END_SRC

** Enable editorconfig

#+BEGIN_SRC emacs-lisp
  (require 'editorconfig)
  (editorconfig-mode 1)
#+END_SRC

** Make flycheck use cask packages in cask projects

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'flycheck
    '(add-hook 'flycheck-mode-hook #'flycheck-cask-setup))
#+END_SRC

** Enable flycheck globally

#+BEGIN_SRC emacs-lisp
  (require 'flycheck)
  (global-flycheck-mode)
#+END_SRC

** Enable drag-stuff mode to drug stuff around with M-i and M-k

#+BEGIN_SRC emacs-lisp
  (defun my/bind-drag-stuff-keys ()
    (global-set-key (kbd "M-i") 'drag-stuff-up)
    (global-set-key (kbd "M-k") 'drag-stuff-down))

  (add-hook 'drag-stuff-mode-hook
          'my/bind-drag-stuff-keys)

  (drag-stuff-global-mode 1)
#+END_SRC

** Enable multiple cursors

#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
#+END_SRC

* Javascript
** Make indentation width = 2 in json files

#+BEGIN_SRC emacs-lisp
  (require 'json-mode)
  (setq json-reformat:indent-width 2)
#+END_SRC

** Use json-mode for json configuration files

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.babelrc\\'" . json-mode))
  (add-to-list 'auto-mode-alist '("\\.eslintrc\\'" . json-mode))
  (add-to-list 'auto-mode-alist '("\\.watchmanconfig\\'" . json-mode))
#+END_SRC

** Use web-mode for all js and jsx files

#+BEGIN_SRC emacs-lisp
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
#+END_SRC

** Make web-mode open all javascript files as jsx

#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook
    (lambda ()
    (if (equal web-mode-content-type "javascript")
    (web-mode-set-content-type "jsx")
    (message "now set to: %s" web-mode-content-type))))
#+END_SRC

** Make indentation width = 2

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
  (defun my-web-mode-hook ()
    "Hooks for Web mode. Adjust indents"
    ;;; http://web-mode.org/
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))
  (add-hook 'web-mode-hook  'my-web-mode-hook)
#+END_SRC

** Make flycheck honour ~/.eslintrc

#+BEGIN_SRC emacs-lisp
  (setq flycheck-eslintrc "~/.eslintrc")
#+END_SRC

** Disable jshint flycheck checking

#+BEGIN_SRC emacs-lisp
  (setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers
      '(javascript-jshint)))
#+END_SRC

** Use eslint with web mode

#+BEGIN_SRC emacs-lisp
  (flycheck-add-mode 'javascript-eslint 'web-mode)
#+END_SRC

** Disable json-jsonlist checking for json files

#+BEGIN_SRC emacs-lisp
  (setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers
      '(json-jsonlist)))
#+END_SRC

** Make flycheck use local node_modules eslint if exists

#+BEGIN_SRC emacs-lisp
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+END_SRC

** Tweak JSX syntax highlighting 

#+BEGIN_SRC emacs-lisp
  (defadvice web-mode-highlight-part (around tweak-jsx activate)
    (if (equal web-mode-content-type "jsx")
      (let ((web-mode-enable-part-face nil))
        ad-do-it)
      ad-do-it))
#+END_SRC

* CSS
** Make indentation width = 2

#+BEGIN_SRC emacs-lisp
  (setq css-indent-offset 2)
#+END_SRC

* Publishing and task management with Org-mode
