#+TITLE: Emacs Configuration

* Mac customizations
Remap CapsLock to Control
Disable C-<left> C-<right>
* Initialization
** Add Cask as Package Manager

#+BEGIN_SRC emacs-lisp
  (require 'cask "/usr/local/share/emacs/site-lisp/cask/cask.el")
  (cask-initialize)
#+END_SRC

** Make all commands that work in shell work in Emacs's eshell

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+END_SRC

** Save Emacs Session by default

#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
#+END_SRC

* UI preferences
** Disable window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

** Hide the splash screen and banner

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
    inhibit-startup-echo-area-message t)
#+END_SRC

** Turn on linum-mode to enable line numbers in the margin of the active buffer

#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
#+END_SRC

** Turn on toggle-truncate-lines for cleaner word wrapping

#+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines t)
#+END_SRC

** Setup theme

#+BEGIN_SRC emacs-lisp
  (load-theme 'zenburn t)
#+END_SRC

** Set default font and configure font-sizing

#+BEGIN_SRC emacs-lisp
  (setq my/default-font "Inconsolata")
  (setq my/default-font-size 18)
  (setq my/current-font-size my/default-font-size)

  (setq my/font-change-increment 1.1)

  (defun my/set-font-size ()
    "Set the font to `my/default-font' at `my/current-font-size'."
    (set-frame-font
     (concat my/default-font "-" (number-to-string my/current-font-size))))

  (defun my/reset-font-size ()
    "Change font size back to `my/default-font-size'."
    (interactive)
    (setq my/current-font-size my/default-font-size)
    (my/set-font-size))

  (defun my/increase-font-size ()
    "Increase current font size by a factor of `my/font-change-increment'."
    (interactive)
    (setq my/current-font-size
          (ceiling (* my/current-font-size my/font-change-increment)))
    (my/set-font-size))

  (defun my/decrease-font-size ()
    "Decrease current font size by a factor of `my/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq my/current-font-size
          (max 1
               (floor (/ my/current-font-size my/font-change-increment))))
    (my/set-font-size))

  (define-key global-map (kbd "C-)") 'my/reset-font-size)
  (define-key global-map (kbd "C-+") 'my/increase-font-size)
  (define-key global-map (kbd "C-=") 'my/increase-font-size)
  (define-key global-map (kbd "C-_") 'my/decrease-font-size)
  (define-key global-map (kbd "C--") 'my/decrease-font-size)

  (my/reset-font-size)
#+END_SRC

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line containing point. It makes it a bit easier to find point, and it’s useful when pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when programming.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC

* Customizations
** Make M-o move between windows

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC

** Make S-<left>,... switch windows

#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
#+END_SRC

** Use spaces instead of tabs
   
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Make default tab-width = 2

I like shallow indentation, but tabs are displayed as 8 characters by default. This reduces that.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

** Make emacs auto indent

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

** Make C-a toggle between the beginning of the line and the beginning of the code

#+BEGIN_SRC emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)
#+END_SRC

** Make C-d duplicate line or region

#+BEGIN_SRC emacs-lisp
  (defun duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times.
If there's no region, the current line will be duplicated. However, if
there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (let (beg end (origin (point)))
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (let ((region (buffer-substring-no-properties beg end)))
      (dotimes (i arg)
        (goto-char end)
        (newline)
        (insert region)
        (setq end (point)))
      (goto-char (+ origin (* (length region) arg) arg)))))
  (global-set-key (kbd "C-d") 'duplicate-current-line-or-region)
#+END_SRC
   
** Comment/Uncomment line/region

#+BEGIN_SRC emacs-lisp
  (defun comment-dwim-line (&optional arg)
    "Replacement for the comment-dwim command.
    If no region is selected and current line is not blank and we are not at the end of the line,
    then comment current line.
    Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
    (interactive "*P")
    (comment-normalize-vars)
    (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
        (comment-or-uncomment-region (line-beginning-position) (line-end-position))
      (comment-dwim arg)))

  (global-set-key "\M-;" 'comment-dwim-line)
#+END_SRC

** Turn on subword-mode everywhere

Treating terms in CamelCase symbols as separate words makes editing a little easier.

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Turn on ido mode

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** Add neotree plugin

#+BEGIN_SRC emacs-lisp
  (global-set-key [f8] 'neotree-toggle)

  ; (setq neo-smart-open t)
  ; (setq projectile-switch-project-action 'neotree-projectile-action)
  ; (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+END_SRC

* Javascript
** Make indentation width = 2

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

** Use es6

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist `(,(rx ".js" string-end) . js2-mode))
#+END_SRC

* CSS
** Make indentation width = 2

#+BEGIN_SRC emacs-lisp
  (setq css-indent-offset 2)
#+END_SRC

* Publishing and task management with Org-mode
** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks

*** TODO this does not work for some reason
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode 1)))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis (...) that org displays when there’s stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language’s major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

** Task and org-capture management

Store my org files in ~/Google Drive/org, define the location of an index file (my main todo list) and archive finished tasks in ~/Google Drive/org/archive.org

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Google Drive/org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

I store all my todos in ~/Google Drive/org/index.org, so I’d like to derive my agenda from there.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list org-index-file))
#+END_SRC

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lispn
(setq org-log-done 'time)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC
